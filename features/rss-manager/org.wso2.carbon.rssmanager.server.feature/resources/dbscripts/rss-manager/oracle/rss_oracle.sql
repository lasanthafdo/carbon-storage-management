CREATE TABLE RM_ENVIRONMENT(
  ID INTEGER,
  NAME VARCHAR2(128) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE (NAME, TENANT_ID)
)
/

CREATE SEQUENCE RM_ENVIRONMENT_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER RM_ENVIRONMENT_TRIGGER
                    BEFORE INSERT
                    ON RM_ENVIRONMENT
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                     BEGIN
                       SELECT RM_ENVIRONMENT_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                           END;
/


CREATE TABLE RM_SERVER_INSTANCE (
  ID INTEGER,
  ENVIRONMENT_ID INTEGER NOT NULL,
  NAME VARCHAR2(128) NOT NULL,
  SERVER_URL VARCHAR2(1024) NOT NULL,
  DBMS_TYPE VARCHAR2(128) NOT NULL,
  INSTANCE_TYPE VARCHAR2(128) NOT NULL,
  SERVER_CATEGORY VARCHAR2(128) NOT NULL,
  ADMIN_USERNAME VARCHAR2(128),
  ADMIN_PASSWORD VARCHAR2(255),
  DRIVER_CLASS VARCHAR(128) NOT NULL ,
  TENANT_ID INTEGER NOT NULL,
  SSH_HOST VARCHAR(128),
  SSH_PORT INTEGER,
  SSH_USERNAME VARCHAR(128),
  SNAPSHOT_TARGET_DIRECTORY VARCHAR(1024),
  UNIQUE (NAME, ENVIRONMENT_ID, TENANT_ID),
  PRIMARY KEY (ID),
  FOREIGN KEY (ENVIRONMENT_ID) REFERENCES RM_ENVIRONMENT (ID)
)
/

CREATE SEQUENCE RM_SERVER_INSTANCE_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER RM_SERVER_INSTANCE_TRIGGER
                    BEFORE INSERT
                    ON RM_SERVER_INSTANCE
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                     BEGIN
                       SELECT RM_SERVER_INSTANCE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                           END;
/


CREATE TABLE RM_DATABASE (
  ID INTEGER,
  NAME VARCHAR2(128) NOT NULL,
  RSS_INSTANCE_ID INTEGER NOT NULL,
  TYPE VARCHAR2(15) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  UNIQUE (NAME, RSS_INSTANCE_ID, TENANT_ID),
  PRIMARY KEY (ID),
  FOREIGN KEY (RSS_INSTANCE_ID) REFERENCES RM_SERVER_INSTANCE (ID)
)
/

CREATE SEQUENCE RM_DATABASE_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER RM_DATABASE_TRIGGER
                    BEFORE INSERT
                    ON RM_DATABASE
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                     BEGIN
                       SELECT RM_DATABASE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                           END;
/


CREATE TABLE RM_DATABASE_USER (
  ID INTEGER,
  USERNAME VARCHAR2(16) NOT NULL,
  RSS_INSTANCE_ID INTEGER NOT NULL,
  TYPE VARCHAR2(15) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  INSTANCE_NAME VARCHAR2(128) NOT NULL,
  UNIQUE (USERNAME, RSS_INSTANCE_ID, TENANT_ID, TYPE, INSTANCE_NAME),
  PRIMARY KEY (ID)
)
/

CREATE SEQUENCE RM_DATABASE_USER_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER RM_DATABASE_USER_TRIGGER
                    BEFORE INSERT
                    ON RM_DATABASE_USER
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                     BEGIN
                       SELECT RM_DATABASE_USER_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                           END;
/


CREATE TABLE RM_USER_DATABASE_ENTRY (
  ID INTEGER,
  DATABASE_USER_ID INTEGER NOT NULL,
  DATABASE_ID INTEGER NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE (DATABASE_USER_ID, DATABASE_ID),
  FOREIGN KEY (DATABASE_USER_ID) REFERENCES RM_DATABASE_USER (ID),
  FOREIGN KEY (DATABASE_ID) REFERENCES RM_DATABASE (ID)
)
/

CREATE SEQUENCE RM_USER_DATABASE_ENTRY_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER RM_USER_DATABASE_ENTRY_TRIGGER
                    BEFORE INSERT
                    ON RM_USER_DATABASE_ENTRY
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                     BEGIN
                       SELECT RM_USER_DATABASE_ENTRY_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                           END;
/


CREATE TABLE RM_USER_DATABASE_PRIVILEGE (
  ID INTEGER,
  USER_DATABASE_ENTRY_ID INTEGER NOT NULL,
  SELECT_PRIV CHAR(1) CHECK (SELECT_PRIV IN('N','Y')),
  INSERT_PRIV CHAR(1) CHECK (INSERT_PRIV IN('N','Y')),
  UPDATE_PRIV CHAR(1) CHECK (UPDATE_PRIV IN('N','Y')),
  DELETE_PRIV CHAR(1) CHECK (DELETE_PRIV IN('N','Y')),
  CREATE_PRIV CHAR(1) CHECK (CREATE_PRIV IN('N','Y')),
  DROP_PRIV CHAR(1) CHECK (DROP_PRIV IN('N','Y')),
  REFERENCES_PRIV CHAR(1) CHECK (REFERENCES_PRIV IN('N','Y')),
  INDEX_PRIV CHAR(1) CHECK (INDEX_PRIV IN('N','Y')),
  ALTER_PRIV CHAR(1) CHECK (ALTER_PRIV IN('N','Y')),
  EXECUTE_PRIV CHAR(1) CHECK (EXECUTE_PRIV IN('N','Y')),
  EVENT_PRIV CHAR(1) CHECK (EVENT_PRIV IN('N','Y')),
  TRIGGER_PRIV CHAR(1) CHECK (TRIGGER_PRIV IN('N','Y')),
  DEBUG_PRIV CHAR(1) CHECK (DEBUG_PRIV IN('N','Y')),
  FLASHBACK_PRIV CHAR(1) CHECK (FLASHBACK_PRIV IN('N','Y')),
  READ_PRIV CHAR(1) CHECK (READ_PRIV IN('N','Y')),
  WRITE_PRIV CHAR(1) CHECK (WRITE_PRIV IN('N','Y')),
  UNDER_PRIV CHAR(1) CHECK (UNDER_PRIV IN('N','Y')),
  ON_COMMIT_REFRESH_PRIV CHAR(1) CHECK (ON_COMMIT_REFRESH_PRIV IN('N','Y')),
  QUERY_REWRITE_PRIV CHAR(1) CHECK (QUERY_REWRITE_PRIV IN('N','Y')),
  PRIMARY KEY (ID),
  UNIQUE (USER_DATABASE_ENTRY_ID),
  FOREIGN KEY (USER_DATABASE_ENTRY_ID) REFERENCES RM_USER_DATABASE_ENTRY (ID)
)
/

CREATE SEQUENCE RM_USER_PRIVILEGE_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER RM_USER_PRIVILEGE_TRIGGER
                    BEFORE INSERT
                    ON RM_USER_DATABASE_PRIVILEGE
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                     BEGIN
                       SELECT RM_USER_PRIVILEGE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                           END;
/


CREATE TABLE RM_SYSTEM_DATABASE_COUNT (
  ID INTEGER NOT NULL,
  ENVIRONMENT_ID INTEGER NOT NULL,
  COUNT INTEGER DEFAULT 0,
  PRIMARY KEY (ID),
  FOREIGN KEY (ENVIRONMENT_ID) REFERENCES RM_ENVIRONMENT (ID)
)
/

CREATE TABLE RM_PRIVILEGE_TEMPLATE (
  ID INTEGER,
  ENVIRONMENT_ID INTEGER NOT NULL,
  NAME VARCHAR2(128) NOT NULL,
  TENANT_ID INTEGER NOT NULL,
  PRIMARY KEY (ID),
  UNIQUE (ENVIRONMENT_ID, NAME, TENANT_ID),
  FOREIGN KEY (ENVIRONMENT_ID) REFERENCES RM_ENVIRONMENT (ID)
)
/

CREATE SEQUENCE RM_PRIVILEGE_TEMPLATE_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER RM_PRIVILEGE_TEMPLATE_TRIGGER
                    BEFORE INSERT
                    ON RM_PRIVILEGE_TEMPLATE
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                     BEGIN
                       SELECT RM_PRIVILEGE_TEMPLATE_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                           END;
/


CREATE TABLE RM_PRIVILEGE_TEMPLATE_ENTRY (
  ID INTEGER,
  TEMPLATE_ID INTEGER NOT NULL,
  SELECT_PRIV CHAR(1) CHECK (SELECT_PRIV IN('N','Y')),
  INSERT_PRIV CHAR(1) CHECK (INSERT_PRIV IN('N','Y')),
  UPDATE_PRIV CHAR(1) CHECK (UPDATE_PRIV IN('N','Y')),
  DELETE_PRIV CHAR(1) CHECK (DELETE_PRIV IN('N','Y')),
  CREATE_PRIV CHAR(1) CHECK (CREATE_PRIV IN('N','Y')),
  DROP_PRIV CHAR(1) CHECK (DROP_PRIV IN('N','Y')),
  REFERENCES_PRIV CHAR(1) CHECK (REFERENCES_PRIV IN('N','Y')),
  INDEX_PRIV CHAR(1) CHECK (INDEX_PRIV IN('N','Y')),
  ALTER_PRIV CHAR(1) CHECK (ALTER_PRIV IN('N','Y')),
  EXECUTE_PRIV CHAR(1) CHECK (EXECUTE_PRIV IN('N','Y')),
  EVENT_PRIV CHAR(1) CHECK (EVENT_PRIV IN('N','Y')),
  TRIGGER_PRIV CHAR(1) CHECK (TRIGGER_PRIV IN('N','Y')),
  DEBUG_PRIV CHAR(1) CHECK (DEBUG_PRIV IN('N','Y')),
  FLASHBACK_PRIV CHAR(1) CHECK (FLASHBACK_PRIV IN('N','Y')),
  READ_PRIV CHAR(1) CHECK (READ_PRIV IN('N','Y')),
  WRITE_PRIV CHAR(1) CHECK (WRITE_PRIV IN('N','Y')),
  UNDER_PRIV CHAR(1) CHECK (UNDER_PRIV IN('N','Y')),
  ON_COMMIT_REFRESH_PRIV CHAR(1) CHECK (ON_COMMIT_REFRESH_PRIV IN('N','Y')),
  QUERY_REWRITE_PRIV CHAR(1) CHECK (QUERY_REWRITE_PRIV IN('N','Y')),
  PRIMARY KEY (ID),
  FOREIGN KEY (TEMPLATE_ID) REFERENCES RM_PRIVILEGE_TEMPLATE (ID)
)
/

CREATE SEQUENCE RM_TEMPLATE_ENTRY_SEQ START WITH 1 INCREMENT BY 1 NOCACHE
/
CREATE OR REPLACE TRIGGER RM_TEMPLATE_ENTRY_TRIGGER
                    BEFORE INSERT
                    ON RM_PRIVILEGE_TEMPLATE_ENTRY
                    REFERENCING NEW AS NEW
                    FOR EACH ROW
                     BEGIN
                       SELECT RM_TEMPLATE_ENTRY_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
                           END;
/


